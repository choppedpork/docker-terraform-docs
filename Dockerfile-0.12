FROM golang:alpine3.11 as builder

# Install dependencies
RUN set -x \
	&& apk add --no-cache \
		bash \
		curl \
		gcc \
		git \
		make \
		musl-dev \
	&& curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

# Get and build terraform-docs
ARG VERSION=latest
RUN set -x \
	&& export GOPATH=/go \
	&& mkdir -p /go/src/github.com/terraform-docs \
	&& git clone https://github.com/terraform-docs/terraform-docs /go/src/github.com/terraform-docs/terraform-docs \
	&& cd /go/src/github.com/terraform-docs/terraform-docs \
	&& if [ "${VERSION}" != "latest" ]; then \
		git checkout v${VERSION}; \
	fi \
	# Build terraform-docs 0.11.0 and above
  && if [ "${VERSION}" = "latest" ] || [ "${VERSION}" = "0.11.0" ]; then \
    make build GOOS=linux GOARCH=amd64 \
    && mv bin/linux-amd64/terraform-docs /usr/local/bin/terraform-docs; \
	# Build terraform-docs 0.8.0-rc.1 and above
	else \
		make gox \
		&& make build-all GOOS=linux GOARCH=amd64 \
		&& mv bin/terraform-docs-${VERSION}-linux-amd64 /usr/local/bin/terraform-docs; \
	fi \
	&& chmod +x /usr/local/bin/terraform-docs

# Version pre-check
RUN set -x \
	&& if [ "${VERSION}" != "latest" ]; then \
		terraform-docs --version | grep "${VERSION}"; \
	else \
		terraform-docs --version | grep -E "(terraform-docs[[:space:]])?(version[[:space:]])?(dev|latest|v[0-9]+.[0-9].+[0-9]+-[0-9]+-[0-9a-z]{8}[[:space:]])"; \
	fi

# Use a clean tiny image to store artifacts in
FROM alpine:3.11
LABEL \
	maintainer="cytopia <cytopia@everythingcli.org>" \
	repo="https://github.com/cytopia/docker-terraform-docs"
COPY --from=builder /usr/local/bin/terraform-docs /usr/local/bin/terraform-docs
COPY ./data/docker-entrypoint-0.12.sh /docker-entrypoint.sh

WORKDIR /data

CMD ["terraform-docs", "--version"]
ENTRYPOINT ["/docker-entrypoint.sh"]
